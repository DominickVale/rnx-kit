"use strict";(self.webpackChunk_rnx_kit_docsite=self.webpackChunk_rnx_kit_docsite||[]).push([[4075],{5318:function(e,t,r){r.d(t,{Zo:function(){return m},kt:function(){return d}});var n=r(7378);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),p=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},m=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),c=p(r),d=o,k=c["".concat(s,".").concat(d)]||c[d]||u[d]||a;return r?n.createElement(k,i(i({ref:t},m),{},{components:r})):n.createElement(k,i({ref:t},m))}));function d(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var p=2;p<a;p++)i[p]=r[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}c.displayName="MDXCreateElement"},1967:function(e,t,r){r.r(t),r.d(t,{assets:function(){return m},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return u}});var n=r(5773),o=r(808),a=(r(7378),r(5318)),i=["components"],l={},s="metro-resolver-symlinks",p={unversionedId:"tools/metro-resolver-symlinks",id:"tools/metro-resolver-symlinks",title:"metro-resolver-symlinks",description:"",source:"@site/docs/tools/metro-resolver-symlinks.mdx",sourceDirName:"tools",slug:"/tools/metro-resolver-symlinks",permalink:"/rnx-kit/docs/tools/metro-resolver-symlinks",editUrl:"https://github.com/microsoft/rnx-kit/tree/main/docsite/docs/tools/metro-resolver-symlinks.mdx",tags:[],version:"current",frontMatter:{},sidebar:"toolsSidebar",previous:{title:"metro-plugin-duplicates-checker",permalink:"/rnx-kit/docs/tools/metro-plugin-duplicates-checker"},next:{title:"metro-serializer",permalink:"/rnx-kit/docs/tools/metro-serializer"}},m={},u=[{value:"Installation",id:"installation",level:2},{value:"Usage",id:"usage",level:2},{value:"Options",id:"options",level:2},{value:"<code>remapModule</code>",id:"remapmodule",level:3}],c={toc:u};function d(e){var t=e.components,r=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"metro-resolver-symlinks"},"metro-resolver-symlinks"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"@rnx-kit/metro-resolver-symlinks")," is a Metro resolver with proper support for\nsymlinks. This is especially useful in monorepos, or repos using package\nmanagers that make heavy use of symlinks (such as pnpm)."),(0,a.kt)("h2",{id:"installation"},"Installation"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"yarn add @rnx-kit/metro-resolver-symlinks --dev\n")),(0,a.kt)("p",null,"or if you're using npm"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"npm add --save-dev @rnx-kit/metro-resolver-symlinks\n")),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("p",null,"Import and assign the resolver to ",(0,a.kt)("inlineCode",{parentName:"p"},"resolver.resolveRequest")," in your\n",(0,a.kt)("inlineCode",{parentName:"p"},"metro.config.js"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'const { makeMetroConfig } = require("@rnx-kit/metro-config");\nconst MetroSymlinksResolver = require("@rnx-kit/metro-resolver-symlinks");\n\nmodule.exports = makeMetroConfig({\n  projectRoot: __dirname,\n  resolver: {\n    resolveRequest: MetroSymlinksResolver(),\n  },\n});\n')),(0,a.kt)("h2",{id:"options"},"Options"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:"left"},"Option"),(0,a.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,a.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},"remapModule"),(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("inlineCode",{parentName:"td"},"(moduleId: string) => string")),(0,a.kt)("td",{parentName:"tr",align:"left"},"A custom function for remapping additional modules.")))),(0,a.kt)("h3",{id:"remapmodule"},(0,a.kt)("inlineCode",{parentName:"h3"},"remapModule")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"remapModule")," allows additional remapping of modules. For instance, there is a\n",(0,a.kt)("inlineCode",{parentName:"p"},"remapImportPath")," utility that remaps requests of ",(0,a.kt)("inlineCode",{parentName:"p"},"lib/**/*.js")," to\n",(0,a.kt)("inlineCode",{parentName:"p"},"src/**/*.ts"),". This is useful for packages that don't correctly export\neverything in their main JS file."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},' const { makeMetroConfig } = require("@rnx-kit/metro-config");\n const MetroSymlinksResolver = require("@rnx-kit/metro-resolver-symlinks");\n\n module.exports = makeMetroConfig({\n   projectRoot: __dirname,\n   resolver: {\n     resolveRequest: MetroSymlinksResolver({\n+      remapModule: MetroSymlinksResolver.remapImportPath({\n+        test: (moduleId) => moduleId.startsWith("@rnx-kit/"),\n+        extensions: [".ts", ".tsx"],     # optional\n+        mainFields: ["module", "main"],  # optional\n+      }),\n     }),\n   },\n });\n')),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("strong",{parentName:"p"},"Sidenote:")," When Metro releases a version with the ability to set a\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/facebook/metro/commit/96fb6e904e1660b37f4d1f5353ca1e5477c4afbf"},"custom resolver for Haste requests"),",\nthis way of remapping modules is preferable over\n",(0,a.kt)("inlineCode",{parentName:"p"},"@rnx-kit/babel-plugin-import-path-remapper"),". The Babel plugin mutates the AST\nand requires a second pass.")))}d.isMDXComponent=!0}}]);